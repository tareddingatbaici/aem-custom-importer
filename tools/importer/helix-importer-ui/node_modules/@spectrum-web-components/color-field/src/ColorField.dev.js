"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import {
  html
} from "@spectrum-web-components/base";
import { property } from "@spectrum-web-components/base/src/decorators.js";
import { TinyColor } from "@ctrl/tinycolor";
import { TextfieldBase } from "@spectrum-web-components/textfield";
export class ColorField extends TextfieldBase {
  constructor() {
    super(...arguments);
    this.viewColor = false;
    this._value = "";
    this.cachedColor = null;
    this.cachedTinyColor = null;
  }
  static get styles() {
    return [...super.styles];
  }
  set value(value) {
    if (value === this.value) {
      return;
    }
    const oldValue = this._value;
    this._value = value;
    this.requestUpdate("value", oldValue);
  }
  get value() {
    return this._value;
  }
  getColorValue() {
    if (!this.value) {
      return "";
    }
    if (!this.cachedColor || this.cachedColor !== this.value) {
      const tinyColor = new TinyColor(this.value);
      this.cachedColor = tinyColor.isValid ? tinyColor.toRgbString() : "";
    }
    return this.cachedColor;
  }
  renderColorHandle() {
    return this.viewColor ? html`
                  <sp-color-handle
                      size="m"
                      color="${this.getColorValue()}"
                  ></sp-color-handle>
              ` : html``;
  }
  render() {
    if (this.viewColor) {
      import("@spectrum-web-components/color-handle/sp-color-handle.js");
    }
    return html`
            ${super.render()} ${this.renderColorHandle()}
        `;
  }
  checkValidity() {
    let validity = super.checkValidity();
    if (this.value) {
      if (!this.cachedTinyColor || this.cachedTinyColor.originalInput !== this.value) {
        this.cachedTinyColor = new TinyColor(this.value);
      }
      this.valid = validity = this.cachedTinyColor.isValid;
      this.invalid = !validity;
    }
    return validity;
  }
}
__decorateClass([
  property({ type: Boolean, attribute: "view-color" })
], ColorField.prototype, "viewColor", 2);
//# sourceMappingURL=ColorField.dev.js.map
