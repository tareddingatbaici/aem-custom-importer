"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import {
  html,
  LitElement
} from "@spectrum-web-components/base";
import { defineElement } from "@spectrum-web-components/base/src/define-element.js";
import { state } from "@spectrum-web-components/base/src/decorators.js";
import "@spectrum-web-components/dropzone/sp-dropzone.js";
import { illustration } from "../test/test-svg";
import "@spectrum-web-components/illustrated-message/sp-illustrated-message.js";
import "@spectrum-web-components/link/sp-link.js";
export default {
  component: "sp-dropzone",
  title: "Dropzone",
  args: {
    isDragged: false
  },
  argTypes: {
    isDragged: {
      name: "isDragged",
      type: { name: "boolean", required: false },
      table: {
        type: { summary: "boolean" },
        defaultValue: { summary: false }
      },
      control: {
        type: "boolean"
      }
    }
  }
};
export const Default = (args) => {
  return html`
        <sp-dropzone id="dropzone" tabindex="0" ?dragged=${args.isDragged}>
            <sp-illustrated-message heading="Drag and Drop Your File">
                ${illustration}
            </sp-illustrated-message>
            <div>
                <label for="file-input">
                    <sp-link
                        href="javascript:;"
                        onclick="this.parentElement.nextElementSibling.click()"
                    >
                        Select a File
                    </sp-link>
                    from your computer
                </label>
                <input type="file" id="file-input" style="display: none" />
            </div>
            <div>
                or
                <sp-link href="http://stock.adobe.com" target="blank">
                    Search Adobe Stock
                </sp-link>
            </div>
        </sp-dropzone>
    `;
};
export const Dragged = (args) => {
  return html`
        <sp-dropzone id="dropzone" tabindex="0" ?dragged=${args.isDragged}>
            <sp-illustrated-message heading="Drag and Drop Your File">
                ${illustration}
            </sp-illustrated-message>
            <div>
                <label for="file-input">
                    <sp-link
                        href="javascript:;"
                        onclick="this.parentElement.nextElementSibling.click()"
                    >
                        Select a File
                    </sp-link>
                    from your computer
                </label>
                <input type="file" id="file-input" style="display: none" />
            </div>
            <div>
                or
                <sp-link href="http://stock.adobe.com" target="blank">
                    Search Adobe Stock
                </sp-link>
            </div>
        </sp-dropzone>
    `;
};
Dragged.args = {
  isDragged: true
};
class ControlledDropzone extends LitElement {
  constructor() {
    super(...arguments);
    this.fileName = "mock_file.png";
    this.input = void 0;
  }
  render() {
    return html`
            <span>
                ${this.renderMockFile()}
                <sp-dropzone
                    tabindex="0"
                    id="dropzone"
                    drop-effect="copy"
                    ?dragged=${this.input !== void 0}
                    @sp-dropzone-drop=${this.onChange}
                >
                    <sp-illustrated-message heading="Drag and Drop Your File">
                        ${illustration}
                    </sp-illustrated-message>
                    <div>
                        <label for="file-input">
                            <sp-link
                                href="javascript:;"
                                onclick="this.parentElement.nextElementSibling.click()"
                            >
                                Select a File
                            </sp-link>
                            from your computer
                        </label>
                        <input
                            type="file"
                            id="file-input"
                            style="display: none"
                            @change=${this.onChange}
                        />
                    </div>
                    ${this.renderUploadButton()}
                </sp-dropzone>
            </span>
        `;
  }
  renderMockFile() {
    return this.input === void 0 ? html`
                  <sp-action-button
                      draggable="true"
                      style="margin-bottom: 16px;"
                  >
                      Drag ${this.fileName}
                  </sp-action-button>
              ` : html`
                  <sp-action-button style="margin-bottom: 16px;">
                      Added ${this.fileName}
                  </sp-action-button>
              `;
  }
  renderUploadButton() {
    return this.input === void 0 ? null : html`
                  <sp-action-button autofocus style="margin-top: 16px;">
                      Upload ${this.fileName}
                  </sp-action-button>
              `;
  }
  onChange() {
    this.input = this.fileName;
  }
}
__decorateClass([
  state()
], ControlledDropzone.prototype, "input", 2);
defineElement("controlled-dropzone", ControlledDropzone);
export const Controlled = () => {
  return html`
        <controlled-dropzone></controlled-dropzone>
    `;
};
//# sourceMappingURL=dropzone.stories.js.map
