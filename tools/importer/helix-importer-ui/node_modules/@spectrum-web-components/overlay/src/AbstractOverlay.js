"use strict";import{SpectrumElement as y}from"@spectrum-web-components/base";import{reparentChildren as b}from"@spectrum-web-components/shared/src/reparent-children.js";import{OverlayTimer as f}from"./overlay-timer.js";export const overlayTimer=new f,noop=()=>{};export class BeforetoggleClosedEvent extends Event{constructor(){super("beforetoggle",{bubbles:!1,composed:!1});this.currentState="open";this.newState="closed"}}export class BeforetoggleOpenEvent extends Event{constructor(){super("beforetoggle",{bubbles:!1,composed:!1});this.currentState="closed";this.newState="open"}}export class OverlayStateEvent extends Event{constructor(e,r,{publish:n,interaction:l,reason:i}){super(e,{bubbles:n,composed:n});this.overlay=r;this.detail={interaction:l,reason:i}}}export const guaranteedAllTransitionend=(a,c,e)=>{const r=new AbortController,n=new Map,l=()=>{r.abort(),e()};let i,s;const t=requestAnimationFrame(()=>{i=requestAnimationFrame(()=>{s=requestAnimationFrame(()=>{l()})})}),m=o=>{o.target===a&&(n.set(o.propertyName,n.get(o.propertyName)-1),n.get(o.propertyName)||n.delete(o.propertyName),n.size===0&&l())},u=o=>{o.target===a&&(n.has(o.propertyName)||n.set(o.propertyName,0),n.set(o.propertyName,n.get(o.propertyName)+1),cancelAnimationFrame(t),cancelAnimationFrame(i),cancelAnimationFrame(s))};a.addEventListener("transitionrun",u,{signal:r.signal}),a.addEventListener("transitionend",m,{signal:r.signal}),a.addEventListener("transitioncancel",m,{signal:r.signal}),c()};export function nextFrame(){return new Promise(a=>requestAnimationFrame(()=>a()))}export class AbstractOverlay extends y{constructor(){super(...arguments);this.dispose=noop;this.offset=0;this.willPreventClose=!1}async applyFocus(e,r){}get delayed(){return!1}set delayed(e){}get disabled(){return!1}set disabled(e){}get elementResolver(){return this._elementResolver}set elementResolver(e){this._elementResolver=e}async ensureOnDOM(e){}async makeTransition(e){return null}async manageDelay(e){}async manageDialogOpen(){}async managePopoverOpen(){}managePosition(){}get open(){return!1}set open(e){}get placementController(){return this._placementController}set placementController(e){this._placementController=e}requestSlottable(){}returnFocus(){}get state(){return"closed"}set state(e){}manuallyKeepOpen(){}static update(){const e=new CustomEvent("sp-update-overlays",{bubbles:!0,composed:!0,cancelable:!0});document.dispatchEvent(e)}static async open(e,r,n,l){await import("@spectrum-web-components/overlay/sp-overlay.js");const i=arguments.length===2,s=n||e,t=new this;let m=!1;t.dispose=()=>{t.addEventListener("sp-closed",()=>{m||(u(),m=!0),requestAnimationFrame(()=>{t.remove()})}),t.open=!1,t.dispose=noop};const u=b([s],t,{position:"beforeend",prepareCallback:p=>{const d=p.slot;return p.removeAttribute("slot"),()=>{p.slot=d}}});if(!i&&s&&l){const p=e,d=r,v=l;return AbstractOverlay.applyOptions(t,{...v,delayed:v.delayed||s.hasAttribute("delayed"),trigger:v.virtualTrigger||p,type:d==="modal"?"modal":d==="hover"?"hint":"auto"}),p.insertAdjacentElement("afterend",t),await t.updateComplete,t.open=!0,t.dispose}const g=r;return t.append(s),AbstractOverlay.applyOptions(t,{...g,delayed:g.delayed||s.hasAttribute("delayed")}),t.updateComplete.then(()=>{t.open=!0}),t}static applyOptions(e,r){var n,l;e.delayed=!!r.delayed,e.receivesFocus=(n=r.receivesFocus)!=null?n:"auto",e.triggerElement=r.trigger||null,e.type=r.type||"modal",e.offset=(l=r.offset)!=null?l:0,e.placement=r.placement,e.willPreventClose=!!r.notImmediatelyClosable}}
//# sourceMappingURL=AbstractOverlay.js.map
