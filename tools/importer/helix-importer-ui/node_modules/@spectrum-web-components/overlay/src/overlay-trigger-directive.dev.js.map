{
  "version": 3,
  "sources": ["overlay-trigger-directive.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    ElementPart,\n    nothing,\n    render,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { directive } from 'lit/async-directive.js';\nimport { Overlay, strategies } from './Overlay.dev.js'\nimport { OverlayOptions, TriggerInteraction } from './overlay-types.dev.js'\nimport { ClickController } from './ClickController.dev.js'\nimport { HoverController } from './HoverController.dev.js'\nimport { LongpressController } from './LongpressController.dev.js'\nimport '../sp-overlay.dev.js'\nimport {\n    removeSlottableRequest,\n    SlottableRequestEvent,\n} from './slottable-request-event.dev.js'\nimport { SlottableRequestDirective } from './slottable-request-directive.dev.js'\n\nexport type InsertionOptions = {\n    el: HTMLElement | (() => HTMLElement);\n    where: InsertPosition;\n};\n\nexport type OverlayTriggerOptions = {\n    open?: boolean;\n    triggerInteraction: TriggerInteraction;\n    overlayOptions: OverlayOptions;\n    insertionOptions?: InsertionOptions;\n};\n\nexport class OverlayTriggerDirective extends SlottableRequestDirective {\n    private overlay = new Overlay();\n    private strategy?: ClickController | HoverController | LongpressController;\n\n    protected defaultOptions: OverlayTriggerOptions = {\n        triggerInteraction: 'click',\n        overlayOptions: {\n            placement: 'top-start',\n            type: 'auto',\n            offset: 0,\n        },\n    };\n    protected options: OverlayOptions = {\n        ...this.defaultOptions.overlayOptions,\n    };\n    protected insertionOptions?: InsertionOptions;\n\n    /* c8 ignore next 9 */\n    override render(\n        _template: () => TemplateResult,\n        _options?: Partial<OverlayTriggerOptions>\n    ): unknown {\n        // render function here just defines the interface to the update call later\n        // we don't have anything to render since this is intended to be an ElementPart directive\n        // so will be used on an element and is not itself rendered\n        return nothing;\n    }\n\n    override update(\n        part: ElementPart,\n        [template, options]: Parameters<this['render']>\n    ): void {\n        this.options = {\n            ...this.defaultOptions.overlayOptions,\n            ...options?.overlayOptions,\n        };\n        this.insertionOptions = options?.insertionOptions;\n        this.template = template;\n        let newTarget = false;\n        const triggerInteraction = (options?.triggerInteraction ||\n            this.defaultOptions.triggerInteraction) as TriggerInteraction;\n        const newStrategy =\n            (this.strategy?.type as unknown as TriggerInteraction) !==\n            triggerInteraction;\n        if (this.target !== part.element) {\n            this.target = part.element as HTMLElement;\n            newTarget = true;\n        }\n        if (newTarget || newStrategy) {\n            this.strategy?.abort();\n            this.strategy = new strategies[\n                triggerInteraction as TriggerInteraction\n            ](this.overlay, this.target, true);\n        }\n        this.listenerHost = this.overlay;\n        this.init();\n        this.overlay.open = options?.open ?? false;\n    }\n\n    override handleSlottableRequest(event: SlottableRequestEvent): void {\n        /* c8 ignore next 1 */\n        if (event.target !== event.currentTarget) return;\n\n        const willRemoveSlottable = event.data === removeSlottableRequest;\n        render(willRemoveSlottable ? undefined : this.template(), this.overlay);\n\n        if (willRemoveSlottable) {\n            this.overlay.remove();\n        } else {\n            Overlay.applyOptions(this.overlay, {\n                ...this.options,\n                trigger: this.target,\n            });\n            const insertionEl =\n                typeof this.insertionOptions?.el === 'function'\n                    ? this.insertionOptions.el()\n                    : this.insertionOptions?.el || this.target;\n            const { where = 'afterend' } = this.insertionOptions || {};\n            insertionEl.insertAdjacentElement(where, this.overlay);\n        }\n    }\n}\n\nexport const trigger = directive(OverlayTriggerDirective);\n"],
  "mappings": ";AAWA;AAAA,EAEI;AAAA,EACA;AAAA,OAEG;AACP,SAAS,iBAAiB;AAC1B,SAAS,SAAS,kBAAkB;AAKpC,OAAO;AACP;AAAA,EACI;AAAA,OAEG;AACP,SAAS,iCAAiC;AAcnC,aAAM,gCAAgC,0BAA0B;AAAA,EAAhE;AAAA;AACH,SAAQ,UAAU,IAAI,QAAQ;AAG9B,SAAU,iBAAwC;AAAA,MAC9C,oBAAoB;AAAA,MACpB,gBAAgB;AAAA,QACZ,WAAW;AAAA,QACX,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ;AAAA,IACJ;AACA,SAAU,UAA0B;AAAA,MAChC,GAAG,KAAK,eAAe;AAAA,IAC3B;AAAA;AAAA;AAAA,EAIS,OACL,WACA,UACO;AAIP,WAAO;AAAA,EACX;AAAA,EAES,OACL,MACA,CAAC,UAAU,OAAO,GACd;AAzEZ;AA0EQ,SAAK,UAAU;AAAA,MACX,GAAG,KAAK,eAAe;AAAA,MACvB,GAAG,mCAAS;AAAA,IAChB;AACA,SAAK,mBAAmB,mCAAS;AACjC,SAAK,WAAW;AAChB,QAAI,YAAY;AAChB,UAAM,sBAAsB,mCAAS,uBACjC,KAAK,eAAe;AACxB,UAAM,gBACD,UAAK,aAAL,mBAAe,UAChB;AACJ,QAAI,KAAK,WAAW,KAAK,SAAS;AAC9B,WAAK,SAAS,KAAK;AACnB,kBAAY;AAAA,IAChB;AACA,QAAI,aAAa,aAAa;AAC1B,iBAAK,aAAL,mBAAe;AACf,WAAK,WAAW,IAAI,WAChB,kBACJ,EAAE,KAAK,SAAS,KAAK,QAAQ,IAAI;AAAA,IACrC;AACA,SAAK,eAAe,KAAK;AACzB,SAAK,KAAK;AACV,SAAK,QAAQ,QAAO,wCAAS,SAAT,YAAiB;AAAA,EACzC;AAAA,EAES,uBAAuB,OAAoC;AArGxE;AAuGQ,QAAI,MAAM,WAAW,MAAM;AAAe;AAE1C,UAAM,sBAAsB,MAAM,SAAS;AAC3C,WAAO,sBAAsB,SAAY,KAAK,SAAS,GAAG,KAAK,OAAO;AAEtE,QAAI,qBAAqB;AACrB,WAAK,QAAQ,OAAO;AAAA,IACxB,OAAO;AACH,cAAQ,aAAa,KAAK,SAAS;AAAA,QAC/B,GAAG,KAAK;AAAA,QACR,SAAS,KAAK;AAAA,MAClB,CAAC;AACD,YAAM,cACF,SAAO,UAAK,qBAAL,mBAAuB,QAAO,aAC/B,KAAK,iBAAiB,GAAG,MACzB,UAAK,qBAAL,mBAAuB,OAAM,KAAK;AAC5C,YAAM,EAAE,QAAQ,WAAW,IAAI,KAAK,oBAAoB,CAAC;AACzD,kBAAY,sBAAsB,OAAO,KAAK,OAAO;AAAA,IACzD;AAAA,EACJ;AACJ;AAEO,aAAM,UAAU,UAAU,uBAAuB;",
  "names": []
}
