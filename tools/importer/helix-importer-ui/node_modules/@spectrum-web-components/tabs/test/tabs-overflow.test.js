"use strict";
import "@spectrum-web-components/theme/sp-theme.js";
import "@spectrum-web-components/theme/scale-medium.js";
import "@spectrum-web-components/theme/theme-light.js";
import "@spectrum-web-components/tabs/sp-tab.js";
import "@spectrum-web-components/tabs/sp-tabs.js";
import "@spectrum-web-components/tabs/sp-tab-panel.js";
import "@spectrum-web-components/tabs/sp-tabs-overflow.js";
import { elementUpdated, expect, fixture } from "@open-wc/testing";
import {
  ElementSizes,
  html,
  nothing
} from "@spectrum-web-components/base";
import { repeat } from "lit/directives/repeat.js";
const renderTabsOverflow = async ({
  count,
  size,
  includeTabPanel,
  selected = 1,
  autoscroll = false
}) => {
  const tabsContainer = await fixture(
    html`
            <div class="container" style="width: 200px; height: 150px;">
                <sp-tabs-overflow ?autoscroll=${autoscroll}>
                    <sp-tabs size=${size} selected=${selected}>
                        ${repeat(
      new Array(count),
      (item) => item,
      (_item, index) => html`
                                    <sp-tab
                                        label=${`Tab Item ${index + 1}`}
                                        value=${index + 1}
                                    ></sp-tab>
                                `
    )}
                        ${includeTabPanel ? html`
                                  ${repeat(
      new Array(count),
      (item) => item,
      (_item, index) => html`
                                              <sp-tab-panel value=${index + 1}>
                                                  Content for Tab Item
                                                  ${index + 1}
                                              </sp-tab-panel>
                                          `
    )}
                              ` : nothing}
                    </sp-tabs>
                </sp-tabs-overflow>
            </div>
        `
  );
  await elementUpdated(tabsContainer);
  return tabsContainer;
};
describe("TabsOverflow", () => {
  it("loads default tabs-overflow accessibly", async () => {
    const el = await fixture(
      html`
                <sp-tabs-overflow>
                    <sp-tabs size="m" selected="1">
                        <sp-tab label="Tab Item 1" value="1"></sp-tab>
                        <sp-tab label="Tab Item 2" value="2"></sp-tab>
                        <sp-tab-panel value="1">Tab Content 1</sp-tab-panel>
                        <sp-tab-panel value="2">Tab Content 2</sp-tab-panel>
                    </sp-tabs>
                </sp-tabs-overflow>
            `
    );
    await elementUpdated(el);
    await expect(el).to.be.accessible();
  });
  it("show render left and right buttons in shadowDom", async () => {
    const el = await renderTabsOverflow({
      count: 20,
      size: ElementSizes.L,
      includeTabPanel: true
    });
    const spTabsOverflows = el.querySelector(
      "sp-tabs-overflow"
    );
    const rightButton = spTabsOverflows.shadowRoot.querySelector(
      ".right-scroll"
    );
    expect(rightButton).to.exist;
    const leftButton = spTabsOverflows.shadowRoot.querySelector(
      ".left-scroll"
    );
    expect(leftButton).to.exist;
  });
  it("reflect proper sp-tab size", async () => {
    const el = await renderTabsOverflow({
      count: 20,
      size: ElementSizes.M,
      includeTabPanel: true
    });
    const spTabsOverflows = el.querySelector(
      "sp-tabs-overflow"
    );
    expect(spTabsOverflows.getAttribute("size")).to.equal("m");
  });
  it("should scroll when the button is clicked", async () => {
    const el = await renderTabsOverflow({
      count: 20,
      size: ElementSizes.L,
      includeTabPanel: true
    });
    await elementUpdated(el);
    const spTabsOverflows = el.querySelector(
      "sp-tabs-overflow"
    );
    const leftButton = spTabsOverflows.shadowRoot.querySelector(
      ".left-scroll"
    );
    const rightButton = spTabsOverflows.shadowRoot.querySelector(
      ".right-scroll"
    );
    leftButton.dispatchEvent(new Event("click", {}));
    const tabsEl = spTabsOverflows.querySelector("sp-tab");
    const initialLeft = tabsEl.getBoundingClientRect().left;
    rightButton.dispatchEvent(new Event("click", {}));
    await elementUpdated(el);
    rightButton.dispatchEvent(new Event("click", {}));
    await elementUpdated(el);
    rightButton.dispatchEvent(new Event("click", {}));
    await elementUpdated(el);
    const finalLeft = tabsEl.getBoundingClientRect().left;
    expect(finalLeft).to.be.lessThanOrEqual(initialLeft);
  });
  it("should fail properly if slot is not sp-tabs", async () => {
    const el = await fixture(
      html`
                <sp-tabs-overflow>
                    <div>Some div</div>
                </sp-tabs-overflow>
            `
    );
    await elementUpdated(el);
    const slot = el.shadowRoot.querySelector("slot");
    const slotContent = (slot == null ? void 0 : slot.assignedElements()) || "";
    expect(slotContent[0].toString()).to.not.contains("Tabs");
  });
  it("should automatically bring the selected tab into view", async () => {
    const el = await renderTabsOverflow({
      count: 20,
      size: ElementSizes.L,
      includeTabPanel: false,
      selected: 10
    });
    await elementUpdated(el);
    const tabsEl = el.querySelector("sp-tabs");
    const selectedTab = tabsEl.querySelector(
      `[role="tab"][value="10"]`
    );
    expect(selectedTab).to.exist;
    const selectedTabPosition = selectedTab.getBoundingClientRect();
    expect(selectedTabPosition.left).to.be.greaterThan(0);
    expect(selectedTabPosition.left).to.be.lessThan(tabsEl.clientWidth);
    const firstTab = tabsEl.querySelector(`[role="tab"][value="1"]`);
    const firstTabPosition = firstTab.getBoundingClientRect();
    expect(firstTabPosition.left).to.be.lessThan(0);
  });
  it("prev and next buttons have default labels", async () => {
    const el = await renderTabsOverflow({
      count: 20,
      size: ElementSizes.M,
      includeTabPanel: true
    });
    await elementUpdated(el);
    const spTabsOverflows = el.querySelector(
      "sp-tabs-overflow"
    );
    const leftButton = spTabsOverflows.shadowRoot.querySelector(
      ".left-scroll"
    );
    const rightButton = spTabsOverflows.shadowRoot.querySelector(
      ".right-scroll"
    );
    expect(leftButton == null ? void 0 : leftButton.getAttribute("aria-label")).to.equal(
      "Scroll to previous tabs"
    );
    expect(rightButton == null ? void 0 : rightButton.getAttribute("aria-label")).to.equal(
      "Scroll to next tabs"
    );
  });
  it("prev and next buttons labels overwritten via attributes", async () => {
    const tabsContainer = await fixture(
      html`
                <div class="container" style="width: 200px; height: 150px;">
                    <sp-tabs-overflow
                        label-previous="custom label prev"
                        label-next="custom label next"
                    >
                        <sp-tabs size=${ElementSizes.M} selected=${1}>
                            ${repeat(
        new Array(20),
        (item) => item,
        (_item, index) => html`
                                        <sp-tab
                                            label=${`Tab Item ${index + 1}`}
                                            value=${index + 1}
                                        ></sp-tab>
                                    `
      )}
                            ${repeat(
        new Array(20),
        (item) => item,
        (_item, index) => html`
                                        <sp-tab-panel value=${index + 1}>
                                            Content for Tab Item ${index + 1}
                                        </sp-tab-panel>
                                    `
      )}
                        </sp-tabs>
                    </sp-tabs-overflow>
                </div>
            `
    );
    await elementUpdated(tabsContainer);
    const el = tabsContainer;
    const spTabsOverflows = el.querySelector(
      "sp-tabs-overflow"
    );
    const leftButton = spTabsOverflows.shadowRoot.querySelector(
      ".left-scroll"
    );
    const rightButton = spTabsOverflows.shadowRoot.querySelector(
      ".right-scroll"
    );
    expect(leftButton == null ? void 0 : leftButton.getAttribute("aria-label")).to.equal(
      "custom label prev"
    );
    expect(rightButton == null ? void 0 : rightButton.getAttribute("aria-label")).to.equal(
      "custom label next"
    );
  });
});
//# sourceMappingURL=tabs-overflow.test.js.map
